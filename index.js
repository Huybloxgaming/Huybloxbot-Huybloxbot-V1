const mineflayer = require('mineflayer')
const mineflayernavigate = require('mineflayer-navigate')(mineflayer)
const ms = require('ms')
const mongoose = require('mongoose')
mongoose.connect('').then(console.log('ƒë√£ k·∫øt n·ªëi v·ªõi m·ªèn go daubui c·ªßa Huyblox'))
const autoeat = require('mineflayer-auto-eat')
const tpsPlugin = require('mineflayer-tps')(mineflayer);
const util = require('minecraft-server-util');
const { autototem } = require('mineflayer-auto-totem')
const toolPlugin = require('mineflayer-tool').plugin
const fs = require("fs");
const armorManager = require('mineflayer-armor-manager')
const { username } = require('./config.json');
const { Client, MessageEmbed } = require("discord.js");
const superagent = require("superagent")
require('dotenv').config();
const client = new Client();
setchannel = require('./models/setchannel')

const Owner = "Huybloxgaming"; //T√™n ch·ªß Bot

const config = {
	address: "2y2c.org",
	version: "1.12.2",
  pin: process.env.pin,
}; // Setting server , Pin , verison

const botCount = 1;
const personalSpace = 4;

var offset = 0;
var bots = [];

const bot = mineflayer.createBot({
  host: config.address,
  port: 25565,
  username: username,
  version: config.version,
})
bot.on('windowOpen', async (window) => {

// const pass = config.pin.split(' ')

// const p2 = pass[1];
// const p3 = pass[2];
// const p4 = pass[3];

//bot.simpleClick.leftMouse(Number(p1));
//bot.simpleClick.leftMouse(Number(p2));
//bot.simpleClick.leftMouse(Number(p3));
//bot.simpleClick.leftMouse(Number(p4));
 //   setTimeout(() => { bot.chat('/2y2c') }, ms(`30s`))
 //   setTimeout(() => { bot.clickWindow(10, 0, 0); }, ms(`5s`))});
  //  setInterval(() => { bot.chat ('AO l√†ng CPvP | DISCORD : https://discord.2y2cpvp.ga | Join Us Now!! | B·∫°n c√≥ th·ªÉ th·∫Øng gi·∫£i ch·ªâ b·∫±ng kƒ© nƒÉng CPVP!!!')},ms(`60s`))


// ^ b·ªè c√°i // ra
const { pathfinder, Movements, goals: { GoalNear } } = require('mineflayer-pathfinder')
const vec3 = require('vec3')
const RANGE_GOAL = 1

let fileContent = fs.readFileSync("bot-data.txt", "utf8").split('\n')
let linesDigged = Number(fileContent[0])
let linesEnd = Number(fileContent[1])
let HomeX = Number(fileContent[2])
let HomeY = Number(fileContent[3])
let HomeZ = Number(fileContent[4])

let sway = Number(fileContent[5])
let shift = Number(fileContent[6])

let restorePoint = 0
let restore = []

var chesting = 0
var digging = 0
var offset = 0

bot.loadPlugin(pathfinder)
bot.loadPlugin(toolPlugin)
bot.loadPlugin(autoeat)
bot.loadPlugin(tpsPlugin)
bot.loadPlugin(armorManager)
bot.loadPlugin(autototem)
mineflayernavigate(bot)

bot.on('chat', (username, message) => {
  if (username === bot.username) return
  if (message === ',tps') {
    bot.chat('Current tps: ' + bot.getTps ())
  }
})
bot.on('chat', (username, message) => {
  if (username === bot.username) return
  if (message === ',serverinfo') {
    bot.chat(`tps server : ${bot.getTps()} Online Player : ${Object.values(bot.players).map(name => name.username).length} | ${randomnum}`)
  }
})
bot.on('login', () => {
  bot.autoEat.options = {
    priority: 'foodPoints',
    startAt: 17,
    bannedFood: []
  }
  const mcData = require('minecraft-data')(bot.version)
  const defaultMove = new Movements(bot, mcData)
  bot.pathfinder.setMovements(defaultMove)
  defaultMove.scafoldingBlocks = []
  defaultMove.allowParkour = false
})

bot.on('health', () => {
  console.log(`food  : ${bot.food} | heart  : ${bot.health}`)
  if (bot.food !== 20) {
    bot.autoEat.disable()
    bot.autoEat.enable()
  }
})

bot.on("physicsTick", async () => {
    bot.autototem.equip()
})
bot.on('chat', async (username, message) => {
  let Owner = bot.Owner;
  command = message.split(' ')
  switch (command[0]) {
    case ',bariton':
      const target = bot.players[username]?.entity
      if (!target) {
        bot.chat("I don't see you !")
        break
      }
      const { x: playerX, y: playerY, z: playerZ } = target.position
      bot.pathfinder.setGoal(new GoalNear(playerX, playerY, playerZ, RANGE_GOAL))
      break
          case ',sethome':
      HomeX = bot.entity.position.x.toFixed(1)
      HomeY = bot.entity.position.y.toFixed(1)
      HomeZ = bot.entity.position.z.toFixed(1)
      bot.chat(`Ok was sethome |data save|`)
      console.log(`was sethome at ${HomeX} ${HomeY} ${HomeZ}`)
      save()
      break
    case ',mine':
        const mine = require('./highway/check')(bot);
        mine
      case ',home':
      digging = 0
      bot.stopDigging()
      bot.pathfinder.goto(new GoalNear(HomeX, HomeY, HomeZ, 0))
      break
        case ',botoff': 
      save()
      digging = 2
      bot.stopDigging()
      bot.quit()
      process.exit(1)
    case 'Vakyla':
    bot.chat("m·∫π m m·ªìm h√¥i vl t·ª± nhi√™n nh·∫Øc t·ªõi r√°c")
    case ',botinfo':
     bot.chat(`food  : ${bot.food} | heart  : ${bot.health} | ${randomnum}`)
    case ',help':
     bot.chat(`/w ${username} tps , serverinfo , kd | | ${randomnum}`)
  }
function save () {
  if (bot.food === 20) bot.autoEat.disable()
  else bot.autoEat.enable()
  fs.writeFileSync("bot-data.txt", linesDigged + '\n' + linesEnd + '\n' + HomeX + '\n' + HomeY + '\n' + HomeZ + '\n' + sway + '\n' + shift )
  bot.chat('data saved')
}
  })
	bot.on('kicked', (reason) => console.info('Kicked for reason', reason))

bot.on('message', message => {
  const embed = new MessageEmbed()
	.setDescription(message.toString())
	.setColor('GREEN')
  client.channels.cache.get("950367506625876008").send(embed)
});
bot.once('login', () => {
    bot.once('spawn', () => {
      const spawn = new MessageEmbed()
        .setDescription(`bot ƒë√£ login v√†o server`)
        .setColor('BLUE')
      client.channels.cache.get("950367506625876008").send(spawn)
      console.log("Bot ƒë√£ ƒëƒÉng nh·∫≠p v√†o server");
      setInterval(() => {
        bot.swingArm("left");
        bot.look(Math.floor(Math.random() * Math.floor("360")), 0, true, null);
      }, 1 * 60 * 1000);
    });
  });
var reconnect = 10;
bot.on('end', (reason) => {
  const end = new MessageEmbed()
	.setDescription(`bot ƒë√£ b·ªã kick l√Ω do \`${reason}\`\, v√†o l·∫°i sau ${reconnect} gi√¢y**`)
	.setColor('RED')
  client.channels.cache.get("950367506625876008").send(end)
  console.log(`Bot m·∫•t k·∫øt n·ªëi server, l√Ω do: ${reason}, k·∫øt n·ªëi l·∫°i sau ${reconnect}s`);
  setTimeout(() => {
	const relog = new MessageEmbed()
	  .setDescription(`k·∫øt n·ªëi l·∫°i server`)
	  .setColor('RED')
	client.channels.cache.get("950367506625876008").send(relog)
	console.log("ƒêang k·∫øt n·ªëi l·∫°i server...");
	createBot();
  }, ms(`${reconnect}s`))
});

client.on('message', async message => {
  if (!message.guild) return;
  if (message.author.bot || message.author.id === client.user.id) return;
  if (message.channel.id === "950367506625876008") {
	message.react('üëç');
	bot.chat(`&e[${message.author.tag}] ${message.content}  | V·¥Ä·¥ã è ü·¥Ä = T Ä·¥Äs ú`)
  }
  if (message.author.id === '536142062395981836') {
	const args = message.content.split(' ');
	const cmd = args.shift().toLowerCase();
	switch (cmd) {
	  case `!chat`: {
		if (!args.length) return;
		await message.react('‚ù§');
		await bot.chat(args.join(" "))
	  }
	}
  }
})

			var string = `1 2 3 4 5 6 6 7 8 9 0`;
			var words = string.split(' ');
            let random1 = words[Math.floor(Math.random() * words.length)];
            let random2 = words[Math.floor(Math.random() * words.length)];
            let random3 = words[Math.floor(Math.random() * words.length)];
            let random4 = words[Math.floor(Math.random() * words.length)];
            let random5 = words[Math.floor(Math.random() * words.length)];
            let random6 = words[Math.floor(Math.random() * words.length)];
            let random7 = words[Math.floor(Math.random() * words.length)];
            let random8 = words[Math.floor(Math.random() * words.length)];
            let random9 = words[Math.floor(Math.random() * words.length)];
            let random10 = words[Math.floor(Math.random() * words.length)];
            var randomnum = `${random1}${random2}${random3}${random4}${random5}${random6}${random7}${random8}${random9}${random10}` 




			const kill1 = /^(.+) b·ªã gi·∫øt b·ªüi (.+) s·ª≠ d·ª•ng (.+)$/;
			const kill2 = /^(.+) b·ªã ƒë·∫©y t√© xu·ªëng v·ª±c b·ªüi (.+)$/;
			const kill3 = /^(.+) ch·∫øt ng·∫°t v√¨ ƒë√©o bi·∫øt b∆°i$/;
			const kill4 = /^(.+) b·ªã th√¥ng ƒë√≠t ƒë·∫øn ch·∫øt$/;
			const kill5 = /^(.+) ch·∫øt ƒë√≥i$/;
			const kill6 = /^(.+) c·ª© nghƒ© ch√°y l√† ng·∫ßu$/;
			const kill7 = /^(.+) t√© ƒë·∫≠p con m·∫π n√≥ m·∫∑t$/;
			const kill8 = /^(.+) b√∫ cu t·ª± s√°t$/;
			const kill9 = /^(.+) T·∫≠p b∆°i trong lava$/;
			const kill10 = /^(.+) ƒëang leo l√™n th√¨ t√© kh·ªèi d√¢y leo$/;
			const kill11 = /^(.+) ƒë√£ b·ªã gi·∫øt b·ªüi (.+)$/;
			const kill12 = /^(.+) ƒë·∫≠p m·∫∑t v√†o c·ªôt ƒëi·ªán$/;
			const kill13 = /^(.+) nghƒ© r·∫±ng c·∫≠u ·∫•y b∆°i ƒë∆∞·ª£c ho√†i$/;
			const kill14 = /^(.+) ch·∫øt ch√°y$/;
			const kill15 = /^(.+) ƒëang leo l√™n th√¨ t√© kh·ªèi Thang$/;
			const kill16 = /^(.+) b·ªã b·∫Øt b·ªüi (.+) d√πng (.+)$/;
			const kill17 = /^(.+) ƒë√£ gi·∫øt (.+) b·∫±ng (.+)$/;
			const kill18 = /^(.+) b·ªã gi·∫øt b·ªüi (.+)$/;
			const kill19 = /^(.+) ƒë√£ gi·∫øt h·∫°i (.+) b·∫±ng (.+)$/;
			const kill20 = /^(.+) ch·∫øt khi t·∫Øm x√¥ng h∆°i$/;
			const kill21 = /^(.+) b√≥p chim t·ª± t·ª≠$/;
			const kill22 = /^(.+) n·ªï banh x√°c (.+) v·ªõi tnt$/;
			const kill23 = /^(.+) was blown up by a Creeper$/;
			const kill24 = /^(.+) (?:n·ªè|n·ªï) banh chim$/;
			const kill25 = /^(.+) b·ªã gi·∫øt b·ªüi (.+) d√πng (.+)$/;
			const kill26 = /^(.+) b·ªã s√©t ƒë√°nh$/;
			const kill27 = /^(.+) b·ªã ƒë√® ch·∫øt b·ªüi ƒëe$/;
			const kill28 = /^(.+) ng·ªß d∆∞·ªõi nether :kappa: $/;
			const kill29 = /^(.+) b·ªã h·ªôi ƒë·ªìng b·ªüi (.+) S·ª≠ d·ª•ng (.+)$/;
			const kill30 = /^(.+) b·ªã b·ªëc h∆°i$/;
		
			// Nh·∫≠p v√†o database
			const kd = require('./kd');
			const date = new Date();
			const joinDate = `Ng ${date.getDate()},Thg ${date.getMonth() + 1},NƒÉm ${date.getFullYear()}`;
		
			async function victimWriter(victim, message, kd) {
				let data = await kd.findOne({ username: victim })
				if (data) {
					const deathcount = Number(data.death) + 1;
					if (data.firstdeath === 'No data') {
						kd.findOneAndUpdate({ username: victim }, { $set: { firstdeath: message, lastdeath: message, death: deathcount } });
					}
					else if (data.firstdeath !== 'No data' && data.lastdeath !== 'No data') {
						kd.findOneAndUpdate({ username: victim }, { $set: { lastdeath: message, death: deathcount } });
					}
				} else {
					data = new kd({
						username: victim,
						kill: '0',
						death: '1',
						firstkill: 'No data',
						lastkill: 'No data',
						firstdeath: `${message}`,
						lastdeath: `${message}`,
						joinDate: joinDate,
					});
					data.save();
				}
			}
			async function killerWriter(killer, message, kd) {
				let data = await kd.findOne({ username: killer })
				if (err) throw err;
				if (data) {
					const killcount = Number(data.kill) + 1;
					if (data.firstdeath === 'No data') {
						await kd.findOneAndUpdate({ username: killer }, { $set: { firstkill: message, lastkill: message, kill: killcount } });
					}
					else if (data.firstkill !== 'No data' && data.lastkill !== 'No data') {
						await kd.findOneAndUpdate({ username: killer }, { $set: { lastkill: message, kill: killcount } });
					}
				} else {
					data = new kd({
						username: killer,
						kill: '1',
						death: '0',
						firstkill: `${message}`,
						lastkill: `${message}`,
						firstdeath: 'No data',
						lastdeath: 'No data',
						joinDate: joinDate,
					});
					await data.save();
				}
			}
		
			// Message
			bot.on('message', async (message) => {
				if (bot.player.username === 'Huybloxgam1ng') return
				const messageregex = /^<(.+)> (.+)$/;
				if (messageregex.test(message.toString())) return;
				const str = message.toString();
				if (kill1.test(str)) {
					const victim = `${kill1.exec(str)[1]}`;
					const killer = `${kill1.exec(str)[2]}`;
					const weapon = `${kill1.exec(str)[3]}`;
					const message = `${victim} b·ªã gi·∫øt b·ªüi ${killer} d√πng ${weapon}`;
					// Victim
					victimWriter(victim, message, kd)
					// Killer
					killerWriter(killer, message, kd)
				}
				else if (kill2.test(str)) {
					const victim = `${kill2.exec(str)[1]}`;
					const killer = `${kill2.exec(str)[2]}`;
					const message = `${victim} b·ªã ƒë·∫©y xu·ªëng v·ª±c ${killer}`;
					// Victim
					victimWriter(victim, message, kd)
					// Killer
					killerWriter(killer, message, kd)
				}
				else if (kill3.test(str)) {
					const victim = `${kill3.exec(str)[1]}`;
					const message = `${victim} ch·∫øt ng·∫°t v√¨ ƒë√©o bi·∫øt b∆°i`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill4.test(str)) {
					const victim = `${kill4.exec(str)[1]}`;
					const message = `${victim} b·ªã th√¥ng ƒë√≠t ƒë·∫øn ch·∫øt`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill5.test(str)) {
					const victim = `${kill5.exec(str)[1]}`;
					const message = `${victim} ch·∫øt ƒë√≥i`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill6.test(str)) {
					const victim = `${kill6.exec(str)[1]}`;
					const message = `${victim} c·ª© nghƒ© ch√°y l√† ng·∫ßu`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill7.test(str)) {
					const victim = `${kill7.exec(str)[1]}`;
					const message = `${victim} t√© ƒë·∫≠p con m·∫π n√≥ m·∫∑t`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill8.test(str)) {
					const victim = `${kill8.exec(str)[1]}`;
					const message = `${victim} b√∫ cu t·ª± s√°t`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill9.test(str)) {
					const victim = `${kill9.exec(str)[1]}`;
					const message = `${victim} T·∫≠p b∆°i trong lava`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill10.test(str)) {
					const victim = `${kill10.exec(str)[1]}`;
					const message = `${victim} ƒëang leo th√¨ t√© kh·ªèi d√¢y leo`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill11.test(str)) {
					const victim = `${kill11.exec(str)[1]}`;
					const killer = `${kill11.exec(str)[2]}`;
					const message = `${victim} b·ªã gi·∫øt b·ªüi ${killer}`;
					// Victim
					victimWriter(victim, message, kd)
					// Killer
					killerWriter(killer, message, kd)
				}
				else if (kill12.test(str)) {
					const victim = `${kill12.exec(str)[1]}`;
					const message = `${victim} ƒë·∫≠p m·∫∑t v√†o c·ªôt ƒëi·ªán`;
					// Victim
					kvictimWriter(victim, message, kd)
				}
				else if (kill13.test(str)) {
					const victim = `${kill13.exec(str)[1]}`;
					const message = `${victim} nghƒ© r·∫±ng c·∫≠u ·∫•y b∆°i ƒë∆∞·ª£c ho√†i`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill14.test(str)) {
					const victim = `${kill14.exec(str)[1]}`;
					const message = `${victim} ch·∫øt ch√°y`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill15.test(str)) {
					const victim = `${kill15.exec(str)[1]}`;
					const message = `${victim} ƒëang leo th√¨ t√© kh·ªèi thang`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill16.test(str)) {
					const victim = `${kill16.exec(str)[1]}`;
					const killer = `${kill16.exec(str)[2]}`;
					const weapon = `${kill16.exec(str)[3]}`;
					const message = `${victim} b·ªã b·∫Øn b·ªüi ${killer} s·ª≠ d·ª•ng ${weapon}`;
					// Victim
					victimWriter(victim, message, kd)
					// Killer
					killerWriter(killer, message, kd)
				}
				else if (kill17.test(str)) {
					const victim = `${kill17.exec(str)[2]}`;
					const killer = `${kill17.exec(str)[1]}`;
					const weapon = `${kill17.exec(str)[3]}`;
					const message = `${killer} ƒë√£ gi·∫øt ${victim} d√πng ${weapon}`;
					// Victim
					victimWriter(victim, message, kd)
					// Killer
					killerWriter(killer, message, kd)
				}
				else if (kill18.test(str)) {
					const victim = `${kill18.exec(str)[1]}`;
					const killer = `${kill18.exec(str)[2]}`;
					const message = `${victim} b·ªã gi·∫øt b·ªüi ${killer}`;
					// Victim
					victimWriter(victim, message, kd)
					// Killer
					killerWriter(killer, message, kd)
				}
				else if (kill19.test(str)) {
					const victim = `${kill19.exec(str)[1]}`;
					const killer = `${kill19.exec(str)[2]}`;
					const weapon = `${kill19.exec(str)[3]}`;
					const message = `${victim} ƒë√£ gi·∫øt h·∫°i ${killer} b·∫≥ng ${weapon}`;
					// Victim
					victimWriter(victim, message, kd)
					// Killer
					killerWriter(killer, message, kd)
				}
				else if (kill20.test(str)) {
					const victim = `${kill13.exec(str)[1]}`;
					const message = `${victim} ch·∫øt khi t·∫Øm x√¥ng h∆°i`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill21.test(str)) {
					const victim = `${kill21.exec(str)[1]}`;
					const message = `${victim} b√≥p chim t·ª± t·ª≠`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill22.test(str)) {
					const killer = `${kill22.exec(str)[2]}`;
					const victim = `${kill22.exec(str)[1]}`;
					const message = `${victim} n·ªï banh x√°c ${killer} b·∫±ng tnt`;
					// Victim
					victimWriter(victim, message, kd)
					// Killer
					killerWriter(killer, message, kd)
				}
				else if (kill23.test(str)) {
					const victim = `${kill23.exec(str)[1]}`;
					const message = `${victim} was blown up by a Creeper`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill24.test(str)) {
					const victim = `${kill24.exec(str)[1]}`;
					const message = `${victim} n·ªï banh chim`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill25.test(str)) {
					const victim = `${kill25.exec(str)[1]}`;
					const killer = `${kill25.exec(str)[2]}`;
					const weapon = `${kill25.exec(str)[3]}`;
					const message = `${victim} b·ªã gi·∫øt b·ªüi ${killer} d√πng ${weapon}`;
					// Victim
					victimWriter(victim, message, kd)
					// Killer
					killerWriter(killer, message, kd)
				}
				else if (kill26.test(str)) {
					const victim = `${kill26.exec(str)[1]}`;
					const message = `${victim} b·ªã s√©t ƒë√°nh`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill27.test(str)) {
					const victim = `${kill27.exec(str)[1]}`;
					const message = `${victim} b√¨ ƒë√® ch·∫øt b·ªüi ƒëe`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill28.test(str)) {
					const victim = `${kill28.exec(str)[1]}`;
					const message = `${victim} ng·ªß d∆∞·ªõi nether :kappa:`;
					// Victim
					victimWriter(victim, message, kd)
				}
				else if (kill29.test(str)) {
					const victim = `${kill29.exec(str)[1]}`;
					const killer = `${kill29.exec(str)[2]}`;
					const weapon = `${kill29.exec(str)[3]}`;
					const message = `${victim} b·ªã h·ªôi ƒë·ªìng b·ªüi ${killer} d√πng ${weapon}`;
					// Victim
					victimWriter(victim, message, kd)
					// Killer
					killerWriter(killer, message, kd)
				}
				else if (kill30.test(str)) {
					const victim = `${kill30.exec(str)[1]}`;
					const message = `${victim} b·ªã b·ªëc h∆°i`;
					// Victim
					victimWriter(victim, message, kd)
				}
			});
			const kdcommand = /^<(.+)> (?:og.kd|,kd)/;
			const jdcommand = /^<(.+)> (?:,jd|og.jd)/;
			const lastkill = /^<(.+)> (?:,lk|,lastkill|og.lk|og.lastkill)/;
			const firstkill = /^<(.+)> (?:,fk|!firstkill|og.firstkill|og.fk)/;
			const lastdeath = /^<(.+)> (?:,ld|!lastdeath|og.ld|og.lastdeath)/;
			const firstdeath = /^<(.+)> (?:,fd|!firstdeath|og.fd|og.firstdeath)/;
		
			bot.on('message', async (msg) => {
				const text = msg.toString();
				const str = msg.toString();
				if (kdcommand.test(msg.toString())) {
					const fullname = kdcommand.exec(text)[1];
					const userlenght = fullname.length - 9;
					const username = fullname.slice(-userlenght);
					const checkdonator = fullname.slice(0, -username.length);
					if (checkdonator === '[Donator]') {
						kd.findOne({ username: `${username}` }, async (err, data) => {
							if (err) throw err;
							if (data) {
								const kdpoint = data.kill / data.death;
								bot.chat(`/w ${username} Kill: ${data.kill} | Death: ${data.death} | K/D: ${kdpoint} `);
							}
							else {
								bot.chat(`/w ${username} t·ª± s√°t ƒë·ªÉ t·∫°o data.`);
							}
						});
					}
					else {
						kd.findOne({ username: `${fullname}` }, async (err, data) => {
							if (err) throw err;
							if (data) {
								const kdpoint = data.kill / data.death;
								bot.chat(`/w ${fullname} Kill: ${data.kill} | Death: ${data.death} | K/D: ${kdpoint}`);
							}
							else {
								bot.chat(`/w ${fullname} t·ª± s√°t ƒë·ªÉ t·∫°o data.`);
							}
						});
					}
				}
				else if (jdcommand.test(msg.toString())) {
					const fullname = jdcommand.exec(text)[1];
					const userlenght = fullname.length - 9;
					const username = fullname.slice(-userlenght);
					const checkdonator = fullname.slice(0, -username.length);
					if (checkdonator === '[Donator]') {
						kd.findOne({ username: `${username}` }, async (err, data) => {
							if (err) throw err;
							if (data) {
								bot.chat(`/w ${username} D·ªØ li·ªáu ƒë∆∞·ª£c t·∫°o t·ª´ ${data.joinDate}`);
							}
							else {
								bot.chat(`/w ${username} t·ª± s√°t ƒë·ªÉ t·∫°o data.`);
							}
						});
					}
					else {
						kd.findOne({ username: `${fullname}` }, async (err, data) => {
							if (err) throw err;
							if (data) {
								bot.chat(`/w ${fullname} d·ªØ li·ªáu dc t·∫°o v√†o ${data.joinDate}`);
							}
							else {
								bot.chat(`/w ${fullname} t·ª± s√°t ƒë·ªÉ t·∫°o data.`);
							}
						});
					}
				}
				else if (lastkill.test(str)) {
					const fullname = lastkill.exec(text)[1];
					const userlenght = fullname.length - 9;
					const username = fullname.slice(-userlenght);
					const checkdonator = fullname.slice(0, -username.length);
					if (checkdonator === '[Donator]') {
						kd.findOne({ username: `${username}` }, async (err, data) => {
							if (err) throw err;
							if (data) {
								bot.chat(`/w ${username} Lastkill: ${data.lastkill}`);
							}
							else {
								bot.chat(`/w ${username} t·ª± s√°t ƒë·ªÉ t·∫°o data.`);
							}
						});
					}
					else {
						kd.findOne({ username: `${fullname}` }, async (err, data) => {
							if (err) throw err;
							if (data) {
								bot.chat(`/w ${fullname} Lastkill: ${data.lastkill}`);
							}
							else {
								bot.chat(`/w ${fullname} t·ª± s√°t ƒë·ªÉ t·∫°o data.`);
							}
						});
					}
				}
				else if (firstkill.test(str)) {
					const fullname = firstkill.exec(text)[1];
					const userlenght = fullname.length - 9;
					const username = fullname.slice(-userlenght);
					const checkdonator = fullname.slice(0, -username.length);
					if (checkdonator === '[Donator]') {
						kd.findOne({ username: `${username}` }, async (err, data) => {
							if (err) throw err;
							if (data) {
								bot.chat(`/w ${username} Firstkill: ${data.firstkill}`);
							}
							else {
								bot.chat(`/w ${username} t·ª± s√°t ƒë·ªÉ t·∫°o data.`);
							}
						});
					}
					else {
						kd.findOne({ username: `${fullname}` }, async (err, data) => {
							if (err) throw err;
							if (data) {
								bot.chat(`/w ${fullname} Firstkill: ${data.firstkill}`);
							}
							else {
								bot.chat(`/w ${fullname} t·ª± s√°t ƒë·ªÉ t·∫°o data.`);
							}
						});
					}
				}
				else if (lastdeath.test(str)) {
					const fullname = lastdeath.exec(text)[1];
					const userlenght = fullname.length - 9;
					const username = fullname.slice(-userlenght);
					const checkdonator = fullname.slice(0, -username.length);
					if (checkdonator === '[Donator]') {
						kd.findOne({ username: `${username}` }, async (err, data) => {
							if (err) throw err;
							if (data) {
								bot.chat(`/w ${username} Lastdeath: ${data.lastdeath}`);
							}
							else {
								bot.chat(`/w ${username} t·ª± s√°t ƒë·ªÉ t·∫°o data.`);
							}
						});
					}
					else {
						kd.findOne({ username: `${fullname}` }, async (err, data) => {
							if (err) throw err;
							if (data) {
								bot.chat(`/w ${fullname} Lastdeath: ${data.lastdeath}`);
							}
							else {
								bot.chat(`/w ${fullname} t·ª± s√°t ƒë·ªÉ t·∫°o data.`);
							}
						});
					}
				}
				else if (firstdeath.test(str)) {
					const fullname = firstdeath.exec(text)[1];
					const userlenght = fullname.length - 9;
					const username = fullname.slice(-userlenght);
					const checkdonator = fullname.slice(0, -username.length);
					if (checkdonator === '[Donator]') {
						kd.findOne({ username: `${username}` }, async (err, data) => {
							if (err) throw err;
							if (data) {
								bot.chat(`/w ${username} Firstdeath: ${data.firstdeath}`);
							}
							else {
								bot.chat(`/w ${username} t·ª± s√°t ƒë·ªÉ t·∫°o data.`);
							}
						});
					}
					else {
						kd.findOne({ username: `${fullname}` }, async (err, data) => {
							if (err) throw err;
							if (data) {
								bot.chat(`/w ${fullname} Firstdeath: ${data.firstdeath}`);
							}
							else {
								bot.chat(`/w ${fullname} t·ª± s√°t ƒë·ªÉ t·∫°o data.`);
							}
						});
					}
				}
			});
client.login(process.env.token);
